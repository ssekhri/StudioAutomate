--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _JVbkwK11EeeVGYA6NRhLyQ
Element-Name: checkiOSSetup
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _6kPfgLr1EeeNYcmkDjwykQ
Runtime-Version: 2.2.0.201706152316
Save-Time: 1/29/18, 2:52 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

// Procedure to get Default/selected Xcode from CLI
proc getSelectedXcodeFromDaemon {
	list [
		list [
			list [$iOSInfoFrmDaemon | split -sep "\"xcode\": {" -trimResults -omitEmptyStrings] | get 1 
		| split -sep "\"keychains\":" -trimResults -omitEmptyStrings] | get 0
	| split -sep "\"executables\":" -trimResults -omitEmptyStrings] | each [val item][val index] {
		try -command {
			if [list [$item | split -sep "\"default\":" -trimResults -omitEmptyStrings] | get 1 | eq "true,"]{
				list [
					list [$item | split -sep "\"path\":" -trimResults -omitEmptyStrings] | get 1 | invoke replaceAll ",\\n\\s*" ""
				| split -sep "\"xcodeapp\":" -trimResults -omitEmptyStrings] | get 0 | invoke replaceAll "\"" ""
			}
		} -catch {/*it does catch the last item of list which does not have "default:" and hence can error out*/}
	}
}

// Procedure to get all the certificates (all types) from CLI
proc getCertificatesFromDaemon {
	list [
		list [
			list [
				list [$iOSInfoFrmDaemon | invoke replaceAll "],\\n\\s*" "]," | split -sep "],\"certs\": {" -trimResults -omitEmptyStrings] | get 1
			| split -sep "],\"wwdr\": " -trimResults -omitEmptyStrings] | get 0
		| split -sep "\"name\":" -trimResults -omitEmptyStrings] | each [val item][val index] {
			if [$index | gt 0]{
				if [list [list [$item | split -sep "\"expired\":" -trimResults -omitEmptyStrings] | get 1 | split -sep "\"invalid\":" -trimResults -omitEmptyStrings] | get 0 | eq "false,"] {
					list [$item | invoke replaceAll ",\\n\\s*" "" | split -sep "\"fullname\":" -trimResults -omitEmptyStrings] | get 0 | invoke replaceAll "\"" ""
				}
			}
		}
	]
}

// Procedure to get all the Provisioning Profiles (all types) from CLI
proc getProfilesFromDaemon {
	list [
		list [
			list [
				list [$iOSInfoFrmDaemon | split -sep "\"provisioning\": {" -trimResults -omitEmptyStrings] | get 1
			| split -sep "\"simulatorDevicePairCompatibility\": {" -trimResults -omitEmptyStrings] | get 0
		| split -sep "\"name\":" -trimResults -omitEmptyStrings] | each [val item][val index] {
			if [$index | gt 0]{
				if [list [list [$item | split -sep "\"expired\":" -trimResults -omitEmptyStrings] | get 1 | split -sep "\"managed\":" -trimResults -omitEmptyStrings] | get 0 | eq "false,"] {
					list [$item | invoke replaceAll ",\\n\\s*" "" | split -sep "\"uuid\":" -trimResults -omitEmptyStrings] | get 0 | invoke replaceAll "\"" ""
				}
			}
		}
	]
}


/***
The below steps to create a bash script and copy output to json file is added as the daemon output was larger than the exec-process buffer size
***/
// Create a bash file and save it at workspace location. The bash writes output of daemon exec command to a json file in workpsace.
str [Concat "/usr/local/bin/node /usr/local/bin/appc appcd exec /ios/latest/info >" [get-workspace-location] "/daemonIOSInfo.json"] | write-lines -uri [Concat [get-workspace-location] "/temp/daemonExec.sh"]
// execute the bash file written above.
exec-process "bash" [Concat [get-workspace-location] "/temp/daemonExec.sh"] -ignoreExitCode -args [get-workspace-location]

get-preferences-menu | click
get-window Preferences | get-tree | select "Studio/Platforms/iOS" | double-click

with [get-window Preferences] {
	let [val iOSInfoFrmDaemon [read-file [Concat [get-workspace-location] "/daemonIOSInfo.json"]]]{
	getSelectedXcodeFromDaemon

	
		// check Xcode path is shown correct and same as in CLI
	    with [get-group General | get-editbox -after [get-label "iOS SDK Home:"]] {
	        get-property "getText()" -raw | 
	        equals [concat [getSelectedXcodeFromDaemon] "/Platforms/iPhoneOS.platform/Developer"] 
			| verify-true
    	}
    	
    	// check iOS certificates shown are same as in CLI
    	with [get-group Certificates | get-table] {
	    	global [val certList [getCertificatesFromDaemon]]
	    	sortListAsc $certList // Sort the certificates list in Ascending order
	    	global [val certList $tempList] -override
	    	
	    	repeat [val index] -times [get-property itemCount -raw | int] -command {
				get-property [concat "getItems().TableItem[" $index "].getText()"] -raw | str | equals [$certList | get $index] | verify-true
			}
    	}
    
    	// check iOS Provisioning Profiles shown are same as in CLI
    	with [get-group "Provisioning Profiles" | get-table] {
	    	global [val profileList [getProfilesFromDaemon]]
	    	sortListAsc $profileList // Sort the Provisioning Profile list in Ascending order
	    	global [val profileList $tempList] -override
	    	
	    	repeat [val index] -times [get-property itemCount -raw | int] -command {
	    			
				get-property [concat "getItems().TableItem[" $index "].getText()"] -raw | str | equals [$profileList | get $index] | verify-true
			}
    	}
    	
    } // end of Let
}


exec-process "rm" "-rf" [Concat [get-workspace-location] "/temp/"] -ignoreExitCode
exec-process "rm" "-rf" [Concat [get-workspace-location] "/daemonIOSInfo.json"] -ignoreExitCode

/*
Keeping the code below which uses App CLI's "appc ti info" command to fetch iOS details
*/
/*
// Procedure to get Default/selected Xcode from CLI
proc getSelectedXcodeFromCLI {
	list [
		list [
			list [$iOSInfoFrmCLI | split -sep "\"selectedXcode\": {" -trimResults -omitEmptyStrings] | get 1 
		| split -sep "\"path\":" -trimResults -omitEmptyStrings] | get 1
	| split -sep ",\n" -trimResults -omitEmptyStrings] | get 0 | invoke replace "\"" ""
}

// Procedure to get all the certificates (all types) from CLI
proc getCertificatesFromCLI {
	list [
		list [
			list [
				list [$iOSInfoFrmCLI | split -sep "\"certs\": {" -trimResults -omitEmptyStrings] | get 1 
			| split -sep "\"teams\": [" -trimResults -omitEmptyStrings] | get 0
		| split -sep "\"name\":" -trimResults -omitEmptyStrings] | each [val certItem][val index] {
			if [$index | gt 0]{
				list [$certItem | split -sep ",\n" -trimResults -omitEmptyStrings] | get 0 | invoke replace "\"" ""
			}
		}
	]
}

// Procedure to get all the Provisioning Profiles (all types) from CLI
proc getProfilesFromCLI {
	list [
		list [
			list [
				list [$iOSInfoFrmCLI | split -sep "\"provisioning\": {" -trimResults -omitEmptyStrings] | get 1 | invoke replaceAll "},\\n\\s*" "}, "
			| split -sep "}, \"devices\": [" -trimResults -omitEmptyStrings] | get 0
		| split -sep "\"name\":" -trimResults -omitEmptyStrings] | each [val provisionItem][val index] {
			if [$index | gt 0]{
				list [$provisionItem | split -sep ",\n" -trimResults -omitEmptyStrings] | get 0 | str | invoke replace "\"" ""
			}
		}
	]
}
*/
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
